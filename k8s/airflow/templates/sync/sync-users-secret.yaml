---
# Source: airflow/templates/sync/sync-users-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: airflow-sync-users
  labels:
    app: airflow
    component: sync-users
    chart: airflow-8.7.1
    release: airflow
    heritage: Helm
data:
  sync_users.py: ""
